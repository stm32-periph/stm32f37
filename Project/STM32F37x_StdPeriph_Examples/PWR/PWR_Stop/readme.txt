/**
  @page PWR_Stop PWR STOP example
  
  @verbatim
  ******************** (C) COPYRIGHT 2012 STMicroelectronics *******************
  * @file    PWR/PWR_Stop/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    20-September-2012
  * @brief   Description of the PWR STOP example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par PWR_Stop Example Description 

This example shows how to enter the system to STOP mode and wake-up using EXTI
Line interrupts. The EXTI Line sources are PA2 and RTC Alarm.

The EXTI line2 is configured to generate interrupt on falling edge.
The EXTI line17(RTC Alarm) is configured to generate interrupt on rising edge.

The system enters and exits STOP mode as follow:
After system start-up, the RTC is configured to generate an Alarm event then the 
system enters STOP mode. To wake-up from STOP mode you have to apply a falling
edge on EXTI line2, otherwise the  RTC Alarm will wake-up the system within 5 
seconds. After exit from STOP, the system clock is reconfigured to its previous 
state (as HSE and PLL are disabled in STOP mode).
Then, after a delay the system will enter again in STOP mode and exit in the way
described above. This behavior is repeated in an infinite loop.

Three leds are used to monitor the system state as follow:
 - LED1 ON: system in RUN mode
 - LED1, LED2 and LED4 OFF: system in STOP mode
 - LED2 ON if EXTI Line2 is used to exit from STOP
 - LED4 ON if EXTI line17(RTC Alarm) is used to exit from STOP 
 @note To measure the current consumption in STOP mode, please refer to 
      @subpage PWR_CurrentConsumption example.


@par Directory contents 

  - PWR/PWR_Stop/stm32f37x_conf.h     Library Configuration file
  - PWR/PWR_Stop/stm32f37x_it.c       Interrupt handlers
  - PWR/PWR_Stop/stm32f37x_it.h       Interrupt handlers header file
  - PWR/PWR_Stop/main.c               Main program
  - PWR/PWR_Stop/system_stm32f37x.c   STM32F37x system source file

@note The "system_stm32f37x.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F37x_Clock_Configuration_V1.0.0.xls" 
      provided with the AN4132 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

      
@par Hardware and Software environment

  - This example runs on STM32F37x Devices.
  
  - This example has been tested with STMicroelectronics STM32373C-EVAL (STM32F37x)
    evaluation board and can be easily tailored to any other supported device 
    and development board.

  - STM32373C-EVAL Set-up
    - Use Key push-button

    
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F37x_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example
        
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
