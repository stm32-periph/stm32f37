/**
  @page ADC_AnalogWatchdog ADC Analog Watchdog example description
  
  @verbatim
  ******************** (C) COPYRIGHT 2012 STMicroelectronics *******************
  * @file    ADC/ADC_AnalogWatchdog/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.0
  * @date    22-December-2021
  * @brief   ADC Analog Watchdog Description
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2012 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example describes how to use the ADC analog watchdog to guard continuously  
an ADC channel.
The ADC1 is configured to convert continuously ADC channel9. 
The analog watchdog is configured and enabled to guard a single regular channel.
Each time the channel9 converted value exceeds programmed analog watchdog high 
threshold (value 1861) or goes down analog watchdog low threshold (value 992)
an AWD interrupt is generated and the output pin connected to LED4 is toggled. 
The LED will bright as long as the AWD interrupt is generated which means that the 
converted value of regular ADC channel9 is outside the range limited by high and 
low analog watchdog thresholds.

The ADC clock is set to system clock div 4 = 56 MHz / 4 = 14 MHz.

@note that ADC channel9 is connected to a potentiometer (RV3) which can deliver 
a voltage between 0V and 3.3V.
 

@par Directory contents 

  - ADC/ADC_AnalogWatchdog/stm32f37x_conf.h    Library Configuration file
  - ADC/ADC_AnalogWatchdog/stm32f37x_it.c      Interrupt handlers
  - ADC/ADC_AnalogWatchdog/stm32f37x_it.h      Interrupt handlers header file
  - ADC/ADC_AnalogWatchdog/main.c              Main program
  - ADC/ADC_AnalogWatchdog/main.h              Main program  header file
  - ADC/ADC_AnalogWatchdog/system_stm32f37x.c  STM32F37x system source file
  
@note The "system_stm32f37x.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F37x_Clock_Configuration_V1.1.0.xls" 
      provided with the AN4132 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32F37x Devices.
  
  - This example has been tested with STMicroelectronics STM32373C-EVAL (STM32F37x)
    evaluation board and can be easily tailored to any other supported device 
    and development board.

  - STM32373C-EVAL Set-up
    - RV3 Potentiometer connected to PB.01 pin.
    - Make sure that the jumper JP16 is fitted.
    - Make sure that the jumper JP12 and JP13 are fitted in 3V3 position.
          
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F37x_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

 
 */
